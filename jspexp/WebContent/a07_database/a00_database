# JSP에서 database 연동 처리
1. 처리 구조
	client ==> 웹어플리케이션 서버 ==> DB Server
				1) 요청값
				2) Dao
				3) 요청값 Dao의 데이터를 통한 화면 처리
	ex) 특정한 로그인 페이지를 서버에 요청하면(URL)
		서버는 로그인 화면을 전송한다.
		클라이언트는 id, pass를 입력하고 submit을 통해서
		서버에 특정 페이지(action)에 요청값 id=@@&pass=@@로 요청한다.
		서버에서는 request객체로 요청값을 받아서
		DAO라는 기능 객체를 통해
			DB서버에 접속 후(기능메서드1) - JDBC드라이버를 통해 IP, port, SID, 계정/비번 접속처리
			매개변수를 통해 id,pass 전달 후
			데이터 확인(기능메서드2) 및 SQL과 Statement객체, ResultSet 객체를 통해 결과를 가져온다.
			> public boolean hasMember(String id, String pass){}
			> ex) Dao dao = new Dao()
				  boolean hasMem = dao.hasMember(id,pass);
				  ArrayList<Member> list = dao.getMember();
				  
		response객체를 통해 받은 id,pass를 통해 DB 데이터가 있는지 여부를 client로 전달
			<% if(hasMember){%>
				<%=id%>님은 회원으로 등록되어 있습니다.
			<%} else {%>
				<%=id%>님은 등록된 회원이 아닙니다.
			<%}%>
			
2. JSP의 처리 내용
	1) 요청값 받기
	2) DAO 선언
		- 연결 처리
		- 연결 후 결과 데이터를 받는 기능메서드 구현
	3) 받은 결과 데이터(VO/ArrayList<VO>)를 화면에 출력
	
3. 핵심 knowledge map
	1) database처리를 위해 java는 어떤 환경을 구성해야 하는가?
	2) database처리에 필요한 정보는 무엇이고 java는 API에 어떤 객체와 메서드를 통해 처리하는가?
	3) database의 여러 가지 기능 별 처리 순서 이해
	4) 요청값과 DB를 통해 받은 데이터는 화면에 어떻게 구현이 되는가?
	5) DB를 처리하는 요구사항에 의해 화면구현/DB객체처리/JSP를 통해 DB에서 받은 데이터 출력을 효과적인 순서를 통해 처리

4. 기능 처리
	1) java: 환경 구성
		- DB 서버 구축, 계정 생성, 사용할 DB테이블 생성 및 데이터 입력, SQL 확인을 통해 데이터 정상 확인
		- JDBC 드라이버 설정: WebContent\WEB-INF\lib\ojdbc6.jar\oracle\driver\OracleDriver.class
			> SQL전송 이외에 모든 기능을 구현.
			> 개발자가 최소한의 코드로 DB서버에 접속해서 사용할 수 있도록 만들어 놓음.
		- DB 접속 정보 확인: IP, port, SID, 계정명, 비밀번호
	2) java 내 Database 처리 API
		- Connection: 접속을 해주는 객체
		- Statement/PreparedStatement: SQL을 이용해서 Server에 명령어를 전송
		- ResultSet: 데이터를 받아 처리해주는 객체(2차원테이블 구조와 동일)
			> select(필요), insert, update, delete(필요X) - commit(), rollback()
		- 접속해제메서드: .close(): 메모리에 있는 자원들을 해제 처리. 마지막에 생성된 객체부터 역순위로 해제해야 함
		- 예외처리(SQLException)를 반드시 해야 함.

5. 조회
	1) SQL을 사용해서 조회 확인
		select * from emp;
		select * from emp e, dept d where e.deptno = d.deptno;
		select * from member where id = @@@ and pass = @@@;
		select * from emp where ename like '%?%'...;
			사원명 [		][검색]
			...
			...
			...
		
	2) 결과를 확인해서 단위 데이터 VO(Value Object)를 작성
		emp의 조회결과의 단위데이터를 class Emp{private int empno...}를 생성해 입력
		단위 데이터를 통해서 DB에서 데이터가 입력된 결과를 받아 화면에서 처리 가능
		ex)
			VO: 테이블의 컬럼명이 아니라 SQL을 통해서 나타나는 타이틀명/데이터명이 VO class의 속성명/타입을 정함
			empno number ==> private int empno;
			ename varchar2 ==> private String ename;
			code char(10) ==> private String code;
			job varchar2 ==> private String job;
			isPass number(1) ==> private boolean isPass; > 0이면 false, 1이면 true할당
			ex)
			SELECT empno || '-' || ename info, ''|| sal salary FROM emp;
			==> VO
			class EmpVo {
				private String info;
				private String salary;
			}
	
	3) DAO 작성
		- connection 처리
			> 공통기능: 연결처리 JDBC, 접속정보(IP, port, SID, 계정, 비밀번호)
			> Connection 객체 생성
		- 조회기능 메서드 선언
			> 단일 VO, ArrayList<VO> 리턴값 선언, 메서드명, 매개변수, 객체나 문자열을 입력받게 구조 생성
			> public ArrayList<Emp> elist(String ename, Vo, ...){
				...
				return empList;
			  }
		- 조회 기능 메서드 안에서 처리할 내용
			1. 공통 연결 메서드 호출
			2. Statement 객체 생성(연결객체 - Connection)
			3. ResultSet 객체 생성(대화객체 - Statement)
				> next(): 행단위 변경
				> getXXX("컬럼명"): 열단위 호출
				> getXXX(순서번호): 열단위 호출. 1부터 시작. select에서 나열된 순ㅅㅓ
					ex) SELECT ename, job, empno FROM emp;
						> rs.getString(1): ename의 데이터
						> rs.getString("job"): job의 데이터
						> rs.getInt(3): empno의 데이터
				==> 1개의 데이터인 경우: VO(단일)
					ex) public Member login(String id, String pass)
				==> 다중행단위 여러 데이터인 경우: ArrayList<VO>, 마지막에 객체의 참조변수 return;
					ex) public ArrayList<Member> memList(Member sch){}
				> 리턴할 객체에 데이터 할당
					ArrayList<Member> mlist = null;
					// 리턴할 객체에 실제 데이터를 할당해서 처리할 수 있도록 한다.
					while(rs.next()){
						// 1. 각 행마다 단위 객체 생성
						Member m = new Member();
						// 2. 객체 안에 데이터베이스에서 온 데이터를 할당
						//	1) 생성자를 통해서
						//		new Member(rs.getString(1),...);
						//	2) setXXX()메서드를 통해서
								m.setId(rs.getString("id"));
						// 3. ArrayList에 추가
						mlist.add(m);
					}
			4. 자원의 해제
				마지막에 생성된 객체부터 역순위로 .close()메서드를 통해서 자원을 해제해준다.
			5. 예외 처리
				계층 구조로 필수 예외 처리. SQLException, Exception...
	4) JSP 화면에서 DAO 객체호출, 기능 메서드에 요청값 처리로 매개변수로 객체 전달, return 객체를 이용해 반복문을 통해 화면출력
		1) import = "패키지명.A01_Dao"
		2) A01_Dao dao = new Dao();
		   ArrayList<Member> mlist = dao.memberList(new Member(id, name));
		3) for문을 통해서 화면 출력
			for(Member m : mlist){
				<tr><td><%=m.getId()%>
				<tr><td><%=m.getName()%>
				<tr><td><%=m.getAuth()%>
				<tr><td><%=m.getPoint()%>
			}

6. 등록
	1) 화면 interface 구현
		등록 버튼을 통해 등록페이지 이동
	2) 등록페이지 화면 구성
		등록할 항목
		form객체를 통해서 등록
		요청값 확인
	3) 데이터처리
		SQL 작성
		DAO 공통
		기능메서드 public void insertEmp(Emp e){}
			(1) 접근, con의 autoCommit(false)로 처리
			(2) 대화객체: 대화객체.executeUpdate(sql)
			(3) commit() 확정명령
			(4) 자원해제
			(5) 예외 처리: 예외 발생 시 rollback()
	4) JSP
		(0) 요청 처리 페이지 구현
		(1) DAO객체 호출
		(2) 요청값을 EMP에 할당
		(3) DAO기능 메서드 호출 완료
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	