# 스프링 화면 처리 프로세스
1. http://localhost:7080/sprintweb/start.do url
2. web.xml
	.do를 확인해서 front controller인 DispatcherServlet.java(framework)
3. dispatcher-servlet.xml을 호출하여, 
	해당하는 컨테이너에 등록된 객체를 확인하고, 메모리에 로딩된 객체를 찾는다.
4. 위에 등록된 객체 안에서 url 패턴이 /start.do인 것의 기능 메서드를 찾는다
	@RequestMapping("/start.do")
	해당 controller의 기능 메서드를 수행해준다.
5. 해당 기능 메서드에서 요청값과 model값 설정은 매개변수로 받을 수 있다.
	public String start(@RequestParam("name") String name, Model d)
6. 해당 기능 메서드에 문자열로 리턴된 view단으로 화면이 호출된다.
	return "JSP파일 위치";


# 스프링 핵심 구현
1. front controller 선언
	DispatcherServlet	
2. 사용할 container 선언
	DispatcherServlet의 설정값 처리 xml
	dispatcher-servlet.xml: 여기에 선언하는 객체 활용방식을 정확하게 파악하고 설정할 수 있어야 원활하게 스프링을 코딩하고 설정할 수 있다.
	bean클래스 선언을 통해 tomcat이 시작되어 첫 번째 호출 될 때 사용할 객체 메모리로 로딩
	- Controller를 등록 처리
3. MVC
	- Controller: Java 클래스로 선언
	- Model: controller 안에 선언
	- View: JSP 파일을 controller에서 호출
			스프링의 view는 외부에서 url로 접근하지 못하고, controller를 통해서만 접근 가능
			WebContent\WEB-INF: 아무나 접근 불가.
	
	
# 환경 설정 순서
1. lib 복사
2. http://localhost:7080/springweb/start.do
	- 호출되었을 때, 스프링 프레임웍에 의해서 controller가 호출되고, view단이 호출되게 처리한다.
	- 사용하게 될 controller를 컨테이너에 등록 dispatcher-servlet.xml
	- controller에 @Controller를 선언
3. 스프링 프레임웍의 첫 단추인 front 컨트롤단 호출
	.do를 통해 
4. /start.do url을 통해 mapping되어 있는 controller의 기능 메서드 호출
5. controller단에서는 해당 기능 메서드의 return "view 자원 위치"; 를 통해 view를 호출 


# 요청값 처리























