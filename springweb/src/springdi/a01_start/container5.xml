<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://www.springframework.org/schema/util
						http://www.springframework.org/schema/util/spring-util.xsd
						http://www.springframework.org/schema/websocket
						http://www.springframework.org/schema/websocket/spring-websocket.xsd" >
<!-- 
# 여러 가지 데이터 구조에 따른 처리
1. ArrayList형 데이터
	1) 단일 데이터 처리
		ArrayList<String> blist = new ArrayList<String>();
		blist.add("사과");
		blist.add("바나나");
		blist.add("딸기");
		blist.add("오렌지");
	2) 위 데이터를 처리할 기능 메서드
		public void setBlist(ArrayList<String> blist){
			this.list = blist;
		}
	3) 컨테이너에서의 처리 내용
		list value-type = "java.lang.String"
			value="사과"
			value="바나나"
			value="딸기"
			value="오렌지"
-->
	<bean id="fMart" class="springdi.z01_vo.Mart">
		<constructor-arg value="과일"/>
		<property name="blist">
			<list value-type="java.lang.String">
				<value>사과</value>
				<value>바나나</value>
				<value>딸기</value>
				<value>오렌지</value>
			</list>
		</property>
	</bean>
<!-- 
ex) @@@의 좋아하는 음악리스트	MyMusic 클래스로 선언하여 출력
	@@@
	@@@
	@@@ 
-->
	<bean id="music" class="springdi.z01_vo.MyMusic">
		<constructor-arg value="박혜선"/>
		<property name="mlist">
			<list value-type="java.lang.String">
				<value>1. 별 바람 꽃 태양</value>
				<value>2. 헤어지자</value>
				<value>3. Hip</value>
				<value>4. 멍청이</value>
			</list>
		</property>
	</bean>
	
	<bean id="sensor1" class="springdi.z01_vo.Sensor">
		<!-- 
		# Properties 타입 데이터할당
		1. 여러 개의 key, value형식의 데이터를 할당하여 처리할 수 있다.
		2. key:value의 형식으로 단위 데이터가 맵핑되어 있고
		3. props로 위 단위 데이터를 누적해서 할당한다.
		public void setAddInfo(Properties addInfo)
		-->
		<property name="addInfo">
			<props>
				<prop key="himan">7777</prop>
				<prop key="higirl">8888</prop>
				<prop key="goodMan">9999</prop>
			</props>
		</property>
		<!-- 
		# Set 타입의 데이터 할당
		1. 순서확보가 되지 않지만 중복허용이 안되게 처리		
		public void setAgentCodes(Set<String> agentCodes) 
		-->
		<property name="agentCodes">
			<set>
				<value>홍길동</value>
				<value>김길동</value>
				<value>이영자</value>
				<value>홍길동</value>
				<value>김길동</value>
			</set>
		</property>
		<!-- 
		# Map 타입의 데이터 할당
		1. 기본적으로 key, value의 모임으로 처리하나, key의 type과 value의 type을 사용자가 지정하여 처리할 수 있다.
		public void setConfig(Map<String, Integer> config)
		-->
		<property name="config">
			<map>
				<entry key="간격" value="1000"/>
				<entry key="시간">
					<value>2000</value>
				</entry>
			</map>
		</property>
	</bean>
</beans>