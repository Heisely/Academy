<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://www.springframework.org/schema/util
						http://www.springframework.org/schema/util/spring-util.xsd
						http://www.springframework.org/schema/websocket
						http://www.springframework.org/schema/websocket/spring-websocket.xsd" >
	<!-- 
	# Component-scan 옵션
	1. 특정한 package를 지정하고 해당 패키지에 포함되어 있는 객체를 선택하여 container메모리에 로딩하는 것을 말한다.
	2. 해당 객체들의 id값은 자동으로 클래스명의 소문자형태로 지정이 된다.
		id="book" class="springdi.z01_vo.Book"
	-->
	<context:component-scan base-package="springdi.z01_vo"/>
	<!-- 
	ex) springdi.z02_vo에 Person, Product 파일을 넣고, 해당 패키지에 있는 내용을 호출 및 사용할 수 있게 하세요.
	Person: 이름 p02, Product 이름 prod03으로 설정하여 처리
	-->
	<context:component-scan base-package="springdi.z02_vo"/>
	
	<context:component-scan base-package="springdi.z03_vo">
		<!-- 
		scan의 형식을 type="regex" 정규식으로 정의
		expression=".*": 하위에 있는 모든 클래스들을 객체화하여 처리
		-->
		<context:include-filter type="regex" expression=".*"/>
	</context:component-scan>
</beans>